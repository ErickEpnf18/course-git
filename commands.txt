USER AND PASSWORD
git config --global user.name ErickEpnf18
git config --global user.email aguilakrakatoa@gmail.com

HISTORIAL
permite ver el historial de commits de projects:
git log -p ==  git log --oneline  ==  git log --oneline --graph === git log --oneline | wc -l --> contar las lineas
ver el archivo de texto: 
cat document.txt

para sacarlo del ínidice(util cuando pones git add . y sacas un archivo que no quieres):
git reset HEAD document.txt

devolver los cambios para el ultimo commit:
git checkout -- document.txt    

muestra cambios que no estan en el índice y los que estan en el índice:
git diff           	git diff --staged

muestra la info del commit:
git show 5375037 --> esto equivale al numeral que saca al sacar el git log --online

NOTA: es importante en el commit la primera palabra que comienze por un verbo

BRANCHS
git branch
git branch rama --> crea rama
git checkout -b seconc_rama --> salta rama y crea
git checkout -m nameBranch --> change name of branch
git checkout -d nameBranch --> eliminar commits pendientes
git checkout master
ubicar que la rama master apunte a otro commit pero cuando esta dividida la rama se crea
un editor de codigo para explicar porque la union de dichas ramas:
git merge second_rama 
git branch -d second_rama --> delete branch

CONFLICTS BRANCHS
git rebase master --> desde la segunda rama para integrar en master
git rebase --continue --> continuar con el merge
git checkout ramaAintegrar --> luego un paso mas integrar en master como paso mas 
para hacer un
fast-forward(que no va hacer otro commit adicional en el merge) 
Todo esto sirve para no tener en el historial tanta integración de "Merge brach "nameRama""

GIT IGNORE
al crear .gitignore rechaza todo lo demas y se enfoca en este pero al poner dentro de su texto 
como "/development.log" este solo le ignora pero no a los demás.
*.log --> ignora todos lo archivos que terminen en .algo

GIT REMOTE
git remote add nameremote "url"
git remote --v --> urls
git push -u nameremote master(any branch) --> -u ayuda a que la proxima vez solo se ponga git push nadamas

bitbucket password token app = 4ZMbEKT9BTWLV7QNMyZr
gitlab acess token = fbLb_hq5exSYR7dQvEDj

rm -rf nameofcarpet --> borrar 
git fetch origin --> trayendo algun dato actualizado en el repositorio en la nube
git pull -->actualizar cambios desde el repositorio en la nube
git commit --amend --> para reescribir el commit
git push --force o git push -f --> fuerza del local hasta el de la nube a que reescriba el commit o la historia 
no hacerlo cuando hay bastantes varias personas realizando el proyecto hacerlo en una rama personal (no en la master)

REWRITE THE HISTORY
git commit --amend --no-edit --> para no reescribir el utlimo commit, ver que cambios habido 
también cambia el hash del commit al hacer algún cambio

git config --global core.editor "code --wait" --> configurar el editor de texto
git reset --hard HEAD^^^ --> DESCARTAR los ultimo commits el #de^ indica a descartar o ~#
git reset --hard HEAD~5 
git reflog --> espacio temporal donde los commits se quedaron huerfanos al no referenciarlos
git reset --hard HEAD@{2} --> RECUPERAR en el espacio temporal vale copiar el huerfano y devolverlo al historial
REBASAR EL COMMIT
git rebase -i HEAD~2 --> unir commits esto abre una ventana y abra:
squash - fusionar commit con el anterior / r - editar commit / pick - usar commit 
IMPORTANTE PARA ACTUALIZAR EN EL LOCAL
git fetch origin  y git reset --hard origin/master --> para actualizar la rama master en el local

ETIQUETAS
git tag v1.0.0.0  --> etiqueta ligera
git tag -a v2.0.0.0 -m 'SuperVersion 2.0.0.0' --> etiqueta anotada (mejor porque te brinda hasta la fecha cuando se creo y el mensaje)
git push origin --tags --> subir todas las etiquetas o se puedes subir individual tag
git tag -d v1.0.0.0 --> delete tag local
git push --delete origin v1.0.0.0 --> delete remote

Working with GitHub
keywords to fix issues:
close
closes
closed
fix
fixes
fixed
resolve
resolves
resolved


				AVANZED
git fetc origin 
git merge origin/master
git branch -a
cat .git/refs/remote/origin/master
cat .git/refs/heads/master
Actulizamos nuestra rama remota es:
git merge origin/master --> luego de fetch para traer los cambios de repo en la nube y fusionarlos en el local
git push --delete origin test-branch-1

:horse:

